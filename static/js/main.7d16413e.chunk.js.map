{"version":3,"sources":["machines/timer.js","machines/pomodoro.js","components/Pomodoro/Tomato/Tomato.jsx","components/Alarm/Alarm.jsx","components/Pomodoro/Pomodoro.jsx","machines/leanCoffee.js","components/LeanCoffee/Coffee/Coffee.jsx","components/LeanCoffee/LeanCoffee.jsx","components/App/App.jsx","serviceWorker.js","index.js"],"names":["parseTime","time","seconds","minutes","calculateReamining","context","remaining","interval","toFixed","createTimerMachine","duration","Machine","initial","display","states","running","invoke","src","cb","setInterval","clearInterval","on","target","cond","TICK","actions","assign","paused","NEXT","SHORT","LONG","pomodoroMachine","id","breakCount","entry","exit","setPomodoroButtons","buttons","primary","secondary","startPomodoroTimer","timer","spawn","setBreakButtons","incrementBreak","resetBreak","startLongBreakTimer","startShortBreakTimer","guards","isLongBreak","value","className","toLowerCase","useState","Sound","status","PLAYING","playing","setPlaying","url","playStatus","playFromPosition","type","onClick","STOPPED","useMachine","state","send","useService","useEffect","document","title","data-testid","map","button","key","WRAPUP","leanCoffeeMachine","setDiscussButtons","setContinueButtons","setWrapupButtons","startDiscussionTimer","startContinueTimer","startWrapupTimer","App","setTimer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7d16413e.chunk.js","sourcesContent":["import { Machine, assign } from 'xstate';\n\nconst parseTime = (time) => {\n  let seconds = time % 60;\n  const minutes = (time - seconds) / 60;\n  if (seconds < 10) {\n    seconds = `0${seconds}`;\n  }\n  return `${minutes}:${seconds}`;\n};\n\nconst calculateReamining = (context) => +(context.remaining - context.interval).toFixed(2);\n\n// eslint-disable-next-line import/prefer-default-export\nexport const createTimerMachine = (duration) => Machine({\n  initial: 'running',\n  context: {\n    remaining: duration,\n    duration,\n    display: parseTime(duration),\n    interval: 1,\n  },\n  states: {\n    running: {\n      invoke: {\n        src: (context) => (cb) => {\n          const interval = setInterval(() => {\n            cb('TICK');\n          }, 1000 * context.interval);\n\n          return () => {\n            clearInterval(interval);\n          };\n        },\n      },\n      on: {\n        '': {\n          target: 'paused',\n          cond: (context) => context.remaining === 0,\n        },\n        TICK: {\n          actions: assign({\n            remaining: (context) => calculateReamining(context),\n            display: (context) => parseTime(calculateReamining(context)),\n          }),\n        },\n      },\n    },\n    paused: {\n      on: {\n        '': {\n          target: 'running',\n          cond: (context) => context.remaining > 0,\n        },\n      },\n    },\n  },\n});\n","import { Machine, assign, spawn } from 'xstate';\nimport { createTimerMachine } from './timer';\n\nexport const NEXT = 'Next Step';\nexport const SHORT = 'Short Break';\nexport const LONG = 'Long Break';\nexport const POMODORO = 'Pomodoro';\nexport const SKIP_BREAK = 'Skip Break';\n\nexport const pomodoroMachine = Machine(\n  {\n    id: 'pomodoroMachine',\n    initial: POMODORO,\n    context: {\n      breakCount: 0,\n    },\n    states: {\n      [POMODORO]: {\n        on: {\n          [NEXT]: [\n            {\n              target: LONG,\n              cond: 'isLongBreak',\n            },\n            {\n              target: SHORT,\n              actions: 'incrementBreak',\n            },\n          ],\n          [SKIP_BREAK]: {\n            target: POMODORO,\n            actions: 'incrementBreak',\n          },\n          [LONG]: {\n            target: LONG,\n            actions: 'incrementBreak',\n          },\n        },\n        entry: ['setPomodoroButtons', 'startPomodoroTimer'],\n        exit: 'setBreakButtons',\n      },\n      [SHORT]: {\n        on: {\n          [NEXT]: POMODORO,\n        },\n        entry: 'startShortBreakTimer',\n      },\n      [LONG]: {\n        on: {\n          [NEXT]: POMODORO,\n        },\n        entry: 'startLongBreakTimer',\n        exit: 'resetBreak',\n      },\n    },\n  },\n  {\n    actions: {\n      setPomodoroButtons: assign(({ breakCount }) => {\n        if (breakCount >= 2) {\n          return {\n            buttons: {\n              primary: LONG,\n              secondary: [SHORT, SKIP_BREAK],\n            },\n          };\n        }\n        return {\n          buttons: {\n            primary: SHORT,\n            secondary: [LONG, SKIP_BREAK],\n          },\n        };\n      }),\n      startPomodoroTimer: assign(() => ({\n        timer: spawn(createTimerMachine(25 * 60)),\n      })),\n      setBreakButtons: assign(() => ({\n        buttons: {\n          primary: POMODORO,\n        },\n      })),\n      incrementBreak: assign((context) => ({\n        breakCount: context.breakCount + 1,\n      })),\n      resetBreak: assign(() => ({\n        breakCount: 0,\n      })),\n      startLongBreakTimer: assign(() => ({\n        timer: spawn(createTimerMachine(15 * 60)),\n      })),\n      startShortBreakTimer: assign(() => ({\n        timer: spawn(createTimerMachine(5 * 60)),\n      })),\n    },\n    guards: {\n      isLongBreak: ({ breakCount }) => breakCount >= 2,\n    },\n  },\n);\n","import React from 'react';\nimport './Tomato.scss';\n\nexport default ({ value, time }) => (\n  <figure className={`tomato ${value.toLowerCase()}`}>\n    <div className=\"body\" />\n    <div className=\"stem\" />\n    <figcaption>{time}</figcaption>\n  </figure>\n);\n","import React, { useState } from 'react';\nimport Sound from 'react-sound';\nimport './Alarm.scss';\n\nexport default () => {\n  const [playing, setPlaying] = useState(Sound.status.PLAYING);\n\n  return (\n    <>\n      <Sound\n        url=\"alarm.wav\"\n        playStatus={playing}\n        playFromPosition={0}\n      />\n      <button\n        type=\"button\"\n        onClick={() => setPlaying(Sound.status.STOPPED)}\n        className=\"mute\"\n      >\n        Mute Alarm\n      </button>\n    </>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useMachine, useService } from '@xstate/react';\nimport { pomodoroMachine, NEXT } from '../../machines/pomodoro';\nimport Tomato from './Tomato/Tomato';\nimport './Pomodoro.scss';\nimport Alarm from '../Alarm/Alarm';\n\nexport default () => {\n  const [state, send] = useMachine(pomodoroMachine);\n  const { context, value } = state;\n  const { buttons, timer } = context;\n  const [time] = useService(timer);\n  const { display, remaining } = time.context;\n\n  useEffect(() => {\n    document.title = display;\n  }, [display]);\n\n  return (\n    <div data-testid={value} className={`pomodoro ${value.toLowerCase()}`}>\n      <h2>{value}</h2>\n      <Tomato value={value} time={display} />\n      {!remaining && (\n      <>\n        <button\n          type=\"button\"\n          data-testid=\"primary\"\n          className=\"primary\"\n          onClick={() => send(NEXT)}\n        >\n          Start\n          {' '}\n          {buttons.primary}\n        </button>\n        {buttons.secondary && (\n        <div className=\"secondary\">\n          {buttons.secondary.map((button) => (\n            <button\n              type=\"button\"\n              data-testid=\"secondary\"\n              key={button}\n              onClick={() => send(button)}\n            >\n              {button}\n            </button>\n          ))}\n        </div>\n        )}\n        <Alarm />\n      </>\n      )}\n    </div>\n  );\n};\n","import { Machine, assign, spawn } from 'xstate';\nimport { createTimerMachine } from './timer';\n\nexport const NEXT = 'Next Step';\nexport const WRAPUP = 'Wrapup';\nexport const CONTINUE = 'Continue';\nexport const DISCUSS = 'Discuss';\n\nexport const leanCoffeeMachine = Machine(\n  {\n    id: 'leanCoffeeMachine',\n    initial: DISCUSS,\n    states: {\n      [DISCUSS]: {\n        on: {\n          [NEXT]: CONTINUE,\n          [DISCUSS]: DISCUSS,\n          [WRAPUP]: WRAPUP,\n        },\n        entry: ['setDiscussButtons', 'startDiscussionTimer'],\n      },\n      [CONTINUE]: {\n        on: {\n          [NEXT]: WRAPUP,\n          [CONTINUE]: CONTINUE,\n        },\n        entry: ['setContinueButtons', 'startContinueTimer'],\n      },\n      [WRAPUP]: {\n        on: {\n          [NEXT]: DISCUSS,\n          [WRAPUP]: WRAPUP,\n        },\n        entry: ['setWrapupButtons', 'startWrapupTimer'],\n      },\n    },\n  },\n  {\n    actions: {\n      setDiscussButtons: assign(() => ({\n        buttons: {\n          primary: CONTINUE,\n          secondary: [WRAPUP, DISCUSS],\n        },\n      })),\n      setContinueButtons: assign(() => ({\n        buttons: {\n          primary: WRAPUP,\n          secondary: [CONTINUE],\n        },\n      })),\n      setWrapupButtons: assign(() => ({\n        buttons: {\n          primary: DISCUSS,\n          secondary: [WRAPUP],\n        },\n      })),\n      startDiscussionTimer: assign(() => ({\n        timer: spawn(createTimerMachine(5 * 60)),\n      })),\n      startContinueTimer: assign(() => ({\n        timer: spawn(createTimerMachine(2 * 60)),\n      })),\n      startWrapupTimer: assign(() => ({\n        timer: spawn(createTimerMachine(1 * 60)),\n      })),\n    },\n  },\n);\n","import React from 'react';\nimport './Coffee.scss';\n\nexport default ({ value, time }) => (\n  <figure className={`coffee ${value.toLowerCase()}`}>\n    <figcaption>{time}</figcaption>\n  </figure>\n);\n","import React, { useEffect } from 'react';\nimport { useMachine, useService } from '@xstate/react';\nimport { leanCoffeeMachine, NEXT } from '../../machines/leanCoffee';\nimport Coffee from './Coffee/Coffee';\nimport './LeanCoffee.scss';\nimport Alarm from '../Alarm/Alarm';\n\nexport default () => {\n  const [state, send] = useMachine(leanCoffeeMachine);\n  const { context, value } = state;\n  const { buttons, timer } = context;\n  const [time] = useService(timer);\n  const { display, remaining } = time.context;\n\n  useEffect(() => {\n    document.title = display;\n  }, [display]);\n\n  return (\n    <div data-testid={value} className={`leanCoffee ${value.toLowerCase()}`}>\n      <h2>{value}</h2>\n      <Coffee value={value} time={display} />\n      {!remaining && (\n      <>\n        <button\n          type=\"button\"\n          data-testid=\"primary\"\n          className=\"primary\"\n          onClick={() => send(NEXT)}\n        >\n          {buttons.primary}\n        </button>\n        {buttons.secondary && (\n        <div className=\"secondary\">\n          {buttons.secondary.map((button) => (\n            <button\n              type=\"button\"\n              data-testid=\"secondary\"\n              key={button}\n              onClick={() => send(button)}\n            >\n              {button}\n            </button>\n          ))}\n        </div>\n        )}\n        <Alarm />\n      </>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport Pomodoro from '../Pomodoro/Pomodoro';\nimport LeanCoffee from '../LeanCoffee/LeanCoffee';\n\nfunction App() {\n  const [timer, setTimer] = useState('');\n\n  return (\n    <>\n      <header className=\"App-header\">\n        <h1>{timer || 'Timers'}</h1>\n        <div className=\"buttons\">\n          <button type=\"button\" onClick={() => setTimer('Pomodoro')}>Pomodoro</button>\n          <button type=\"button\" onClick={() => setTimer('Lean Coffee')}>Lean Coffee</button>\n        </div>\n      </header>\n      <main>\n        {timer === 'Pomodoro' && <Pomodoro />}\n        {timer === 'Lean Coffee' && <LeanCoffee />}\n      </main>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}